/*
Given an array nums, write a function to move all 0's to the end of it while maintaining the relative order of the non-zero elements.

For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].

Note:
You must do this in-place without making a copy of the array.
Minimize the total number of operations.
*/

class Solution {
    public void moveZeroes(int[] nums) {
        int count = 0, j = 0, k = 0;
        int sw = 0;
        for (int i = 0; i < nums.length; i++){
            if (nums[i] == 0)
                count++;
        }
        int n = nums.length - count;  
        while (n >= 0){
            if (nums.length == 1) break;
            if (nums[0] != 0 && n == nums.length - count) {
                j++;
                k++;
                n--;
            }
            if (nums[j] != 0 && sw == 0){
                j++;
                k++;
                if (j == nums.length || k == nums.length) break; 
            }
            if (nums[j] == 0){
                if (nums.length == 2 && nums[nums.length - 1] == 0) break;
                while (nums[k] == 0){
                    k++;
                    if (k == nums.length - 1) break;
                }                             
                nums[j] = nums[k];
                nums[k] = 0;
                sw++;
                j++;                
                k = j + 1;
                if (j == nums.length || k == nums.length) break; 
                if (nums.length == 2) break;
            }
            if (k == nums.length - 1 && nums[k] != 0) {
                nums[j] = nums[k]; 
                sw++;
                if (count != 0)
                    nums[k] = 0;
            }                         
            n--;
            if (nums[nums.length - 1] == 0 && n == 0) break;
        }  
    }
}
